<?xml version="1.0" encoding="UTF-8" standalone="no"?>

<svg
   version="1.1"
   xmlns:dc="http://purl.org/dc/elements/1.1/"
   xmlns:cc="http://creativecommons.org/ns#"
   xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
   xmlns:svg="http://www.w3.org/2000/svg"
   xmlns="http://www.w3.org/2000/svg"
   width="240"
   height="240"
   id="deckahedron_deck"
   class="deckahedron_deck droptarget"
   >
  <script
     type="text/javascript"
     data-namespace="deckahedron_deck"
     id="deckahedron_deck"><![CDATA[

function pile_offset(index) {
  return {
    x: 0.2 * index,
    y: 0.66 * index,
  }
}

var deckahedron_deck = {
  deckJSON: [
   {'id': 1, 'xp': false, 'Stamina': false, 'a': 1, 'b': 1, 'c': 1, 'd': 1, 'crit': 'fail'},
   {'id': 2, 'xp': false, 'Stamina': false, 'a': 1, 'b': 2, 'c': 3, 'd': 2},
   {'id': 3, 'xp': false, 'Stamina': false, 'a': 1, 'b': 4, 'c': 3, 'd': 4},
   {'id': 4, 'xp': false, 'Stamina': false, 'a': 2, 'b': 2, 'c': 3, 'd': 4},
   {'id': 5, 'xp': false, 'Stamina': false, 'a': 2, 'b': 3, 'c': 2, 'd': 3},
   {'id': 6, 'xp': false, 'Stamina': false, 'a': 1, 'b': 2, 'c': 2, 'd': 3},
   {'id': 7, 'xp': false, 'Stamina': false, 'a': 2, 'b': 1, 'c': 2, 'd': 3},
   {'id': 8, 'xp': true,  'Stamina': false, 'a': 1, 'b': 1, 'c': 4, 'd': 1},
   {'id': 9, 'xp': true,  'Stamina': false, 'a': 2, 'b': 2, 'c': 1, 'd': 2},
   {'id': 10, 'xp': false, 'Stamina': false, 'a': 3, 'b': 1, 'c': 2, 'd': 2},
   {'id': 11, 'xp': false, 'Stamina': true, 'a': 3, 'b': 3, 'c': 4, 'd': 3},
   {'id': 12, 'xp': false, 'Stamina': true, 'a': 1, 'b': 3, 'c': 3, 'd': 4},
   {'id': 13, 'xp': false, 'Stamina': true, 'a': 3, 'b': 3, 'c': 4, 'd': 4},
   {'id': 14, 'xp': false, 'Stamina': true, 'a': 3, 'b': 4, 'c': 3, 'd': 4},
   {'id': 15, 'xp': true , 'Stamina': true, 'a': 1, 'b': 2, 'c': 2, 'd': 4},
   {'id': 16, 'xp': true,  'Stamina': true, 'a': 3, 'b': 2, 'c': 1, 'd': 2},
   {'id': 17, 'xp': true,  'Stamina': true, 'a': 4, 'b': 1, 'c': 1, 'd': 2},
   {'id': 18, 'xp': false, 'Stamina': true, 'a': 3, 'b': 4, 'c': 3, 'd': 4},
   {'id': 19, 'xp': false, 'Stamina': true, 'a': 1, 'b': 3, 'c': 4, 'd': 2},
   {'id': 20, 'xp': false, 'Stamina': true, 'a': 4, 'b': 4, 'c': 4, 'd': 4, 'crit': 'win'},
  ],

  generate_card: function(template, cardJSON, deckEl) {
    let card = template.cloneNode(true)

    card.dataset.deckId = deckEl.id
    card.id = (
      deckEl.id
      + '_'
      + cardJSON.id
    )

    card.querySelector('.tspan_detail').textContent = (
      '' +
      (cardJSON.xp ? 'XP' : '') +
      (cardJSON.crit ? cardJSON.crit : '')
    )
    card.querySelector('.tspan_stamina').textContent = (
      cardJSON.Stamina ?  '[S]' : '[ ]'
    )
    card.querySelector('.tspan_anvil').textContent = cardJSON.a
    card.querySelector('.tspan_blades').textContent = cardJSON.b
    card.querySelector('.tspan_crown').textContent = cardJSON.c
    card.querySelector('.tspan_dragon').textContent = cardJSON.d

    card = SVG.adopt(card)
    card.removeClass('card_template')
    card.addClass('card')
    card.addClass('draggable-group')
    card.addClass('c' + cardJSON.id)
    card.addClass('of_' + deckEl.id)
    card.node.dataset.appNamespaces = ['deckahedron_deck_card']

    return card
  },

  generate_deck: function(elem) {
    local_doc = SVG.adopt(elem)
    deck = local_doc.group()
    deck.addClass('deck')
    deck.addClass('contents_group')
    deck_id = 'deck_' + base32.short_id()
    deck.id(deck_id)
    local_doc.add(deck)

    let template = elem.querySelector('.card_template')
    shuffle(this.deckJSON).map((cardJSON) => {
      card = this.generate_card(template, cardJSON, deck.node)
      this.endeck(deck, card)
    })
    template.remove()
  },

  endeck: function(deck, card) {
    localDocEl = deck.node.closest('.deckahedron_deck')
    deck_area = localDocEl.querySelector('#g_deck_area')
    deck_area = SVG.adopt(deck_area)

    deckahedron_deck.flip_card_to_back(card.node)

    let offset = pile_offset(
      deck.node.querySelectorAll('.card').length
    )
    card.cy(deck_area.cy() + offset.y)
    card.cx(deck_area.cx() + offset.x)
    deck.add(card)
  },

  flip_card_to_front: function(cardEl) {
    back = cardEl.querySelector('.card_back')
    back.remove()
    cardEl.insertBefore(back, cardEl.firstChild)
  },

  flip_card_to_back: function(cardEl) {
    back = cardEl.querySelector('.card_back')
    back.remove()
    cardEl.appendChild(back)
  },

  flip_card: function(cardEl) {
    if (cardEl.lastElementChild.classList.contains('card_back')) {
      deckahedron_deck.flip_card_to_front(cardEl)
    } else {
      deckahedron_deck.flip_card_to_back(cardEl)
    }
  },

  initialize: function(elem) {
    this.generate_deck(elem)
    elem.addEventListener('deckahedron_deck_flip', this.flip_handler)
    elem.addEventListener('deckahedron_deck_reshuffle', this.reshuffle_handler)
    elem.addEventListener('dblclick', lock_selection)
  },

  menu: {
    'Flip': {
      eventName: 'deckahedron_deck_flip',
      applicable: (dNode) => {
        deck = dNode.querySelector('.deck')
        if (deck.childNodes.length > 0) {
          return true
        }
        return false
      },
    },
    'Reshuffle': {
      eventName: 'deckahedron_deck_reshuffle',
      applicable: (dNode) => { return true },
    },
  },

  flip_handler: function(evt) {
    let topcard = this.querySelector('.deck .card:last-child')
    deckahedron_deck.flip_card(topcard)
  },

  reshuffle_handler: function(evt) {
    var deck

    if (evt.target.classList.contains('deck')) {
      deck = evt.target
    } else {
      deck = evt.target.querySelector('.deck')
    }
    local_doc = deck.closest('.deckahedron_deck')

    cardArray = []
    sDeck = SVG.adopt(deck)
    local_doc.querySelectorAll('.of_' + deck.id).forEach((card) => {
      card.remove()
      cardArray.push(card)
    })
    shuffle(cardArray).map((card) => {
      sCard = SVG.adopt(card)
      deckahedron_deck.endeck(sDeck, sCard)
    })
  },

}


deckahedron_deck_card = {
  initialize: function(elem) {
    elem.addEventListener('deckahedron_deck_card_flip', this.flip_handler)
    elem.addEventListener('deckahedron_deck_card_return', this.return_handler)
    elem.addEventListener('dblclick', this.flip_handler)
  },

  return_handler: function(evt) {
    push_to_parent(
      byId(evt.target.id),
      byId(evt.target.dataset.deckId),
      (cardEl, deckEl) => {
        s(cardEl, 'data-app-class', null)
        cardEl.classList.add('draggable-group')
        deckahedron_deck.endeck(SVG.adopt(deckEl), SVG.adopt(cardEl))
      }
    )
  },

  flip_handler: function(evt) {
    deckahedron_deck.flip_card(this)
  },

  menu: {
    'Flip': {
      eventName: 'deckahedron_deck_card_flip',
      applicable: (dNode) => { return true },
    },
    'Return to deck': {
      eventName: 'deckahedron_deck_card_return',
      applicable: (dNode) => {
        console.log('dnode', dNode)
        if(document.querySelector('#' + dNode.dataset.deckId)) {
          return true
        } else {
          return false
        }
      },
    },
  },

}


    ]]></script>

  <svg
     id="card_template"
     class="card_template"
     x="40"
     y="60"
     width="150"
     height="150"
     >
    <g class="card_front">
    <rect
       style="opacity:1;fill:#ffffff;fill-opacity:1;stroke:#000000;stroke-width:0.26458332;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1"
       id="card_face"
       width="150"
       height="150"
       x="0"
       y="0"
       rx="10"
       ry="10" />
    <text
       xml:space="preserve"
       style="font-style:normal;font-variant:normal;
       font-weight:bold;font-stretch:normal;
       font-size:20px;line-height:125%;
       font-family:serif;
       letter-spacing:0px;word-spacing:0px;
       fill:#F00000;fill-opacity:1;"
       x="5"
       y="40"
       id="text_detail"><tspan
         sodipodi:role="line"
         id="tspan_detail"
         class="tspan_detail"
         >Details</tspan></text>
    <text
       xml:space="preserve"
       style="font-style:normal;font-variant:normal;
       font-weight:bold;font-stretch:normal;
       font-size:30px;line-height:125%;
       font-family:serif;
       letter-spacing:0px;word-spacing:0px;
       fill:#F00000;fill-opacity:1;"
       x="45"
       y="130"
       id="text_anvil"><tspan
         sodipodi:role="line"
         id="tspan_anvil"
         class="tspan_anvil"
         >A</tspan></text>
    <text
       xml:space="preserve"
       style="font-style:normal;font-variant:normal;
       font-weight:bold;font-stretch:normal;
       font-size:30px;line-height:125%;
       font-family:serif;
       letter-spacing:0px;word-spacing:0px;
       fill:#F00000;fill-opacity:1;"
       x="10"
       y="100"
       id="text_blades"><tspan
         sodipodi:role="line"
         id="tspan_blades"
         class="tspan_blades"
         >B</tspan></text>
    <text
       xml:space="preserve"
       style="font-style:normal;font-variant:normal;
       font-weight:bold;font-stretch:normal;
       font-size:30px;line-height:125%;
       font-family:serif;
       letter-spacing:0px;word-spacing:0px;
       fill:#F00000;fill-opacity:1;"
       x="110"
       y="100"
       id="text_crown"><tspan
         sodipodi:role="line"
         id="tspan_crown"
         class="tspan_crown"
         >C</tspan></text>
    <text
       xml:space="preserve"
       style="font-style:normal;font-variant:normal;
       font-weight:bold;font-stretch:normal;
       font-size:30px;line-height:125%;
       font-family:serif;
       letter-spacing:0px;word-spacing:0px;
       fill:#F00000;fill-opacity:1;"
       x="45"
       y="20"
       id="text_dragon"><tspan
         sodipodi:role="line"
         id="tspan_dragon"
         class="tspan_dragon"
         >D</tspan></text>
    <text
       xml:space="preserve"
       style="font-style:normal;font-variant:normal;
       font-weight:bold;font-stretch:normal;
       font-size:30px;line-height:125%;
       font-family:serif;
       letter-spacing:0px;word-spacing:0px;
       fill:#a0a0a0;fill-opacity:1;"
       x="45"
       y="100"
       id="text_stamina"><tspan
         sodipodi:role="line"
         id="tspan_stamina"
         class="tspan_stamina"
         >K</tspan></text>
    </g>
    <g class="card_back">
    <rect
       style="opacity:1;
       fill:#ffffff;fill-opacity:1;
       stroke:#000000;stroke-width:0.5;
       stroke-opacity:1"
       id="card_back_outer"
       width="150"
       height="150"
       x="0"
       y="0"
       rx="10"
       ry="10" />
    <rect
       style="opacity:1;
       fill:#202020;fill-opacity:1;
       stroke:none"
       id="card_back_inner"
       width="140"
       height="140"
       x="5"
       y="5"
       rx="5"
       ry="5" />
    </g>
  </svg>
    <g id="g_deck_area" >
      <rect
         style="opacity:1;
         fill-opacity:0;
         stroke:#ffffff;
         stroke-width:0.5;
         stroke-opacity:0.5"
         id="deck_area_rect"
         width="240"
         height="240"
         x="0.0"
         y="0.0"
         rx="0"
         ry="0" />
    </g>
</svg>
