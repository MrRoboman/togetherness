<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<svg
   xmlns:dc="http://purl.org/dc/elements/1.1/"
   xmlns:cc="http://creativecommons.org/ns#"
   xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
   xmlns:svg="http://www.w3.org/2000/svg"
   xmlns="http://www.w3.org/2000/svg"
   xmlns:xlink="http://www.w3.org/1999/xlink"
   xmlns:sodipodi="http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd"
   xmlns:inkscape="http://www.inkscape.org/namespaces/inkscape"
   width="200"
   height="150"
   version="1.1"
   id="paper_sum"
   inkscape:version="0.92.3 (2405546, 2018-03-11)"
   sodipodi:docname="paper_sum.svg">
  <metadata
     id="metadata19">
    <rdf:RDF>
      <cc:Work
         rdf:about="">
        <dc:format>image/svg+xml</dc:format>
        <dc:type
           rdf:resource="http://purl.org/dc/dcmitype/StillImage" />
      </cc:Work>
    </rdf:RDF>
  </metadata>
  <sodipodi:namedview
     pagecolor="#ffffff"
     bordercolor="#666666"
     borderopacity="1"
     objecttolerance="10"
     gridtolerance="10"
     guidetolerance="10"
     inkscape:pageopacity="0"
     inkscape:pageshadow="2"
     inkscape:window-width="1220"
     inkscape:window-height="850"
     id="namedview17"
     showgrid="false"
     inkscape:zoom="3.1466667"
     inkscape:cx="98.386999"
     inkscape:cy="52.773614"
     inkscape:window-x="0"
     inkscape:window-y="27"
     inkscape:window-maximized="0"
     inkscape:current-layer="paper_sum" />
  <link
     rel="stylesheet"
     media="screen"
     href="https://fontlibrary.org/face/subotype"
     type="text/css" />
  <defs
     id="defs2">
    <linearGradient
       id="linearGradient820"
       inkscape:collect="always">
      <stop
         style="stop-color:#f0f0f0;stop-opacity:1"
         offset="0"
         id="stop826" />
      <stop
         style="stop-color:#ffffff;stop-opacity:1;"
         offset="1"
         id="stop824" />
    </linearGradient>
    <linearGradient
       inkscape:collect="always"
       xlink:href="#linearGradient820"
       id="linearGradient822"
       x1="36.702206"
       y1="263.7836"
       x2="37.07946"
       y2="285.09375"
       gradientUnits="userSpaceOnUse"
       gradientTransform="matrix(3.8041646,0,0,3.8135004,-0.53771847,-984.16693)" />
  </defs>
  <script
     type="text/javascript"
     data-namespace="paper_sum"
     id="script_paper_sum"><![CDATA[
var paper_sum = {

  rule_roll_handler: function(evt) {
    console.log('paper_sum ', this.id, 'hears rule_roll event', evt)
    contentsGroup = paper_sum.select_my(this, 'contents_group')
    contentsGroup.querySelectorAll('svg').forEach((s) => {
      evt_fire('die_roll', s, null, {})
    })
  },

  activate: function(evt) {
    console.log('paper_sum this', this, 'hears activate event', evt)
    lock_selection(evt)
  },

  dragover_handler: function(evt) {
    console.log('paper_sum dragover_handler', evt.detail.draggedElemId, evt.detail.dropElemId)
    draggedElem = byId(evt.detail.draggedElemId)
    dragged = SVG.adopt(draggedElem)
    dropElem = byId(evt.detail.dropElemId)
    drop = SVG.adopt(dropElem)

    is_inside = isInside(dragged.node, drop.node)
    if (!is_inside) {
      drop.opacity(0.9)
      return
    }
    drop.opacity(1.0)
  },

  drop_handler: function(evt) {
    console.log('target should be ', this)
    console.log('target is', evt.target)
    ruleElem = this
    console.log('paper_sum drop_handler', ruleElem.id, evt.detail.draggedElemId, evt.detail.dropElemId)
    draggedElem = byId(evt.detail.draggedElemId)
    dropElem = byId(evt.detail.dropElemId)
    if (
      ruleElem.id === draggedElem.id
      ||
      ruleElem.contains(draggedElem)
      ||
      draggedElem.contains(ruleElem)
      ||
      !ruleElem.contains(dropElem)
    ) {
      return
    }
    dragged = SVG.adopt(draggedElem)
    drop = SVG.adopt(dropElem)

    contentsGroup = paper_sum.select_my(ruleElem, 'contents_group')
    is_inside = isInside(dragged.node, drop.node)
    console.log('dragged', draggedElem.id, 'is inside drop', evt.detail.dropElemId, '?', is_inside)

    if (contentsGroup.querySelector('#' + draggedElem.id)) {
      // already inside the contents
      if (is_inside) {
        return
      }
      pop_from_parent(draggedElem, {})
    } else {
      if (!is_inside) {
        return
      }
      push_to_parent(
        draggedElem,
        ruleElem,
        (dieElem, parentElem) => {
          console.log('consume it here', dieElem.id, parentElem.id)
          contentsGroup.appendChild(dieElem)
        }
      )
    }
    ruleElem.dispatchEvent(new CustomEvent('dom_change', {
      bubbles: true,
      detail: { 'ruleElemId': ruleElem.id },
    }))
  },

  shape_change_handler: function(evt) {
    console.log('shape_change_handler', this.id, evt)
    contentsGroup = paper_sum.select_my(this, 'contents_group')
    cgObj = SVG.adopt(contentsGroup)
    bounds = cgObj.bbox()
    if (evt.type == 'rule_height_minus') {
      delta = { x: 0, y: -10 }
    } else if (evt.type == 'rule_height_plus') {
      delta = { x: 0, y: 10 }
    } else if (evt.type == 'rule_width_minus') {
      delta = { x: -10, y: 0 }
    } else if (evt.type == 'rule_width_plus') {
      delta = { x: 10, y: 0 }
    }

    el = paper_sum.select_my(this, 'big_rect')
    bigRect = SVG.adopt(el)
    if ((bigRect.width() + delta.x) < (bounds.width + bounds.x)) {
        console.error('out of bounds', bounds)
        return
    }
    if ((bigRect.height() + delta.y) < (bounds.height + bounds.y)) {
        console.error('out of bounds', bounds)
        return
    }
    bigRect.width( bigRect.width() + delta.x )
    bigRect.height( bigRect.height() + delta.y )

    var idStrings = [
      'top_rect',
      'text_rule',
      'tspan_rule',
    ]
    idStrings.forEach((id) => {
      el = paper_sum.select_my(this, id)
      el_ = SVG.adopt(el)
      el_.x( el_.x() + (delta.x/2) )
    })

    idStrings = [
      'bottom_rect',
      'text_sum',
      'tspan_sum',
    ]
    idStrings.forEach((id) => {
      el = paper_sum.select_my(this, id)
      el_ = SVG.adopt(el)
      el_.x( el_.x() + (delta.x/2) )
      el_.y( el_.y() + delta.y )
    })

    this_ = SVG.adopt(this)
    this_.width( this_.width() + delta.x )
    this_.height( this_.height() + delta.y )

  },

  dom_change_handler: function(evt) {
    ruleElem = this
    console.log('dom_change_handler', ruleElem.id, evt.detail)
    let sum = 0
    q = '#' + ruleElem.id + '_contents_group > svg'
    containedSVGs = this.querySelectorAll(q)
    containedSVGs.forEach((s) => {
      let tempNum = 0
      s.querySelectorAll('tspan').forEach((t) => {
        if (t.closest('svg').id !== s.id) {
          // it's buried multiple levels deep in sub-SVGs
          // so skip it lest it be double-counted
          return
        }
        c = t.textContent.trim()
        num = parseInt(c)
        if (isNaN(num)) {
          if (c == '+') {
            tempNum = 1
          } else if (c == '-') {
            tempNum = -1
          }
        } else {
          tempNum =  num
        }
      })
      sum = sum + tempNum
    })
    console.log('sum was', sum)
    tspan = paper_sum.select_my(ruleElem, 'tspan_sum')
    tspan.textContent = sum
  },

  drag_handler: function(evt) {
    if (!this.contains(evt.target)) {
      return
    }
    console.log('inner element being dragged', evt.target.id)
  },

  initialize: function(elem) {
    elem.addEventListener('change', this.dom_change_handler)
    elem.addEventListener('rule_roll', this.rule_roll_handler)
    elem.addEventListener('rule_height_minus', this.shape_change_handler)
    elem.addEventListener('rule_height_plus', this.shape_change_handler)
    elem.addEventListener('rule_width_minus', this.shape_change_handler)
    elem.addEventListener('rule_width_plus', this.shape_change_handler)
    elem.addEventListener('dom_change', this.dom_change_handler)
    elem.addEventListener('dblclick', this.activate)

    elem.addEventListener('svg_drag', this.drag_handler)
    elem.addEventListener('svg_drop', this.drop_handler)
    elem.addEventListener('svg_dragover', this.dragover_handler)
    elem.addEventListener('svg_dragenter', () => {console.log('E')})
    elem.addEventListener('svg_dragleave', () => {console.log('L')})

    var idStrings = [
      'contents_group',
      'big_rect',
      'text_rule',
      'tspan_rule',
      'text_sum',
      'tspan_sum',
    ]
    idStrings.forEach((idString) => {
      el = elem.querySelector('#' + idString)
      el.id = elem.id + '_' + idString
    })

  },

  select_my: function(ruleElem, oldId) {
    q = '#' + ruleElem.id + '_' + oldId
    return ruleElem.querySelector(q)
  },


  menu: {
    'Roll All': {
      eventName: 'rule_roll',
      applicable: (node) => { return true },
    },
    'Height -': {
      eventName: 'rule_height_minus',
      applicable: (node) => { return true },
    },
    'Height +': {
      eventName: 'rule_height_plus',
      applicable: (node) => { return true },
    },
    'Width -': {
      eventName: 'rule_width_minus',
      applicable: (node) => { return true },
    },
    'Width +': {
      eventName: 'rule_width_plus',
      applicable: (node) => { return true },
    },
  },

  serialize: function(elem) {
    value = elem.querySelector('tspan:last-of-type').textContent
    return {value: value}
  },

  deserialize: function(elem, payload) {
    elem.querySelector('tspan:last-of-type').textContent = payload.value
  },

}


    ]]></script>
  <path
     style="color:#000000;display:inline;overflow:visible;visibility:visible;opacity:1;isolation:auto;solid-color:#000000;solid-opacity:1;fill:#000000;fill-opacity:0.5;fill-rule:nonzero;stroke:none;stroke-width:1.58055329"
     d="M 0.62182716,3.9840543 C -0.05911831,53.315496 1.7820974,98.673269 1.0897394,148.0009 l 2.6286777,0.37753 c 64.2333189,2.10124 138.0721529,0.53389 195.4275429,0.67881 L 192.75116,3.5950773 C 156.22357,15.333032 23.268019,5.742078 0.62535822,3.9863806 Z"
     id="paper_shadow"
     inkscape:connector-curvature="0"
     sodipodi:nodetypes="cccccc" />
  <g id="group-monochrome-1" class="colorable">
  <path
     style="opacity:1;fill:url(#linearGradient822);fill-opacity:1;stroke:#b3b3b3;stroke-width:5.00175095;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:0.9"
     d="M 4.9160077,3.3415939 C 38.706274,8.3865499 192.75471,3.5963358 192.75471,3.5963358 l 2.74494,141.4974942 c 0,0 -182.50832,-0.4659 -192.5735061,-1.90732 z"
     class="droptarget"
     id="big_rect"
     inkscape:connector-curvature="0"
     sodipodi:nodetypes="ccccc" />
  </g>
  <g id="contents_group" class="contents_group">
  </g>
  <text
     id="text_rule"
     y="128"
     x="90"
     style="font-style:normal;font-variant:normal;font-weight:bold;font-stretch:normal;font-size:38.07496262px;line-height:125%;font-family:SubotypeSteady;-inkscape-font-specification:SubotypeSteady;letter-spacing:0px;word-spacing:0px;fill:#000080;fill-opacity:1;stroke:none;stroke-width:0.26458329px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
     xml:space="preserve"><tspan
       style="font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-family:SubotypeSteady;-inkscape-font-specification:SubotypeSteady;fill:#000080;stroke-width:0.26458329px"
       x="90"
       y="128"
       id="tspan_rule"
       sodipodi:role="line">Sum=</tspan></text>
  <text
     xml:space="preserve"
     style="font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-size:38.07496262px;line-height:125%;font-family:SubotypeSteady;-inkscape-font-specification:SubotypeSteady;letter-spacing:0px;word-spacing:0px;fill:#000080;fill-opacity:1;stroke:none;stroke-width:0.26458329px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
     x="160"
     y="128"
     id="text_sum"><tspan
       sodipodi:role="line"
       id="tspan_sum"
       x="160"
       y="128"
       style="font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-family:SubotypeSteady;-inkscape-font-specification:SubotypeSteady;fill:#000080;stroke-width:0.26458329px">0</tspan></text>
</svg>
