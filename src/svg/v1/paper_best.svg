<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<svg
   xmlns:dc="http://purl.org/dc/elements/1.1/"
   xmlns:cc="http://creativecommons.org/ns#"
   xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
   xmlns:svg="http://www.w3.org/2000/svg"
   xmlns="http://www.w3.org/2000/svg"
   xmlns:xlink="http://www.w3.org/1999/xlink"
   xmlns:sodipodi="http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd"
   xmlns:inkscape="http://www.inkscape.org/namespaces/inkscape"
   width="200"
   height="200"
   version="1.1"
   id="paper_best"
   inkscape:version="0.92.3 (2405546, 2018-03-11)"
   sodipodi:docname="paper_best.svg">
  <defs
     id="defs2">
    <linearGradient
       id="linearGradient820"
       inkscape:collect="always">
      <stop
         style="stop-color:#f0f0f0;stop-opacity:1"
         offset="0"
         id="stop826" />
      <stop
         style="stop-color:#ffffff;stop-opacity:1;"
         offset="1"
         id="stop824" />
    </linearGradient>
    <linearGradient
       inkscape:collect="always"
       xlink:href="#linearGradient820"
       id="linearGradient822"
       x1="36.70"
       y1="263.7"
       x2="37.07"
       y2="285.0"
       gradientUnits="userSpaceOnUse"
       gradientTransform="matrix(3.8041646,0,0,3.8135004,-0.53771847,-984.16693)" />
  </defs>
  <script
     type="text/javascript"
     data-namespace="paper_best"
     id="script_paper_best"><![CDATA[
var paper_best = {

  visit_contents_group(el, visitFn) {
    let containedSVGs = el.querySelectorAll(
      `#${el.id} > .contents_group > svg`
    )
    containedSVGs.forEach(visitFn)
  },

  rule_roll_handler: function(evt) {
    console.log('paper_best ', this.id, 'hears rule_roll event', evt)
    paper_best.visit_contents_group(this, (s) => {
      evt_fire('die_roll', s, null, {})
    })
  },

  activate: function(evt) {
    console.log('paper_best this', this, 'hears activate event', evt)
    lock_selection(evt)
  },

  dragover_handler: function(evt) {
    console.log('paper_best', this.id, 'dragover_handler',
    evt.detail.draggedElem.id, evt.detail.dropElem.id)
    dragged = SVG.adopt(evt.detail.draggedElem)
    drop = SVG.adopt(evt.detail.dropElem)

    is_inside = isInside(dragged.node, drop.node)
    if (!is_inside) {
      drop.opacity(0.9)
      return
    }
    drop.opacity(1.0)
  },

  drop_handler: function(evt) {
    console.log('target should be ', this)
    console.log('target is', evt.target)
    console.log('paper_best drop_handler', this.id,
      evt.detail.draggedElemId, evt.target)

    draggedElem = byId(evt.detail.draggedElemId)
    dropElem = evt.target
    if (
      this.id === draggedElem.id
      ||
      this.contains(draggedElem)
      ||
      draggedElem.contains(this)
      ||
      !this.contains(dropElem)
    ) {
      return
    }
    dragged = SVG.adopt(draggedElem)
    drop = SVG.adopt(dropElem)

    is_inside = isInside(dragged.node, drop.node)
    console.log('dragged', draggedElem.id, 'box is inside drop',
      dropElem,
      '?', is_inside)

    let contentsGroup = this.querySelector(`#${this.id} > .contents_group`)
    if (contentsGroup.querySelector('#' + draggedElem.id)) {
      // already inside the contents
      if (is_inside) {
        return
      }
      pop_from_parent(draggedElem)
    } else {
      if (!is_inside) {
        return
      }
      push_to_parent(
        draggedElem,
        this,
        (dieElem, parentElem) => {
          console.log('consume it here', dieElem.id, parentElem.id)
          contentsGroup.appendChild(dieElem)
        }
      )
    }
    this.dispatchEvent(new CustomEvent('dom_change', {
      bubbles: true,
      detail: { 'ruleElemId': this.id },
    }))
  },

  dom_change_handler: function(evt) {
    console.log('dom_change_handler', this.id, evt.detail)

    howmany_tspan = this.querySelector(
      `#${this.id} > :not(.contents_group) #tspan_rule_num`
    )

    let howmany = parseInt(howmany_tspan.textContent)
    let removeExtremeFn = (
      howmany >= 0
      ?
      (tally) => {
        tally.splice(tally.indexOf(Math.min.apply(undefined, tally)))
      }
      :
      (tally) => {
        tally.splice(tally.indexOf(Math.max.apply(undefined, tally)))
      }
    )
    let compareFn = (
      howmany >= 0
      ?
      (tempNum, tally) => { return tempNum > Math.min.apply(undefined, tally) }
      :
      (tempNum, tally) => { return tempNum < Math.max.apply(undefined, tally) }
    )
    let tally = []

    paper_best.visit_contents_group(this, (s) => {
      let tempNum = 0
      s.querySelectorAll('tspan').forEach((t) => {
        if (t.closest('svg').id !== s.id) {
          // it's buried multiple levels deep in sub-SVGs
          // so skip it lest it be double-counted
          return
        }
        c = t.textContent.trim()
        num = parseInt(c)
        if (isNaN(num)) {
          if (c == '+') {
            tempNum = 1
          } else if (c == '-') {
            tempNum = -1
          }
        } else {
          tempNum =  num
        }
        if (tally.length < Math.abs(howmany)) {
          tally.push(tempNum)
        } else if (compareFn(tempNum, tally)) {
          removeExtremeFn(tally)
          tally.push(tempNum)
        }
      })
    })
    let tspan = this.querySelector(`#${this.id} > text > #tspan_count`)
    tspan.textContent = tally.reduce((x,y) => x+y, 0)
  },

  best_change_handler: function(evt) {
    console.log('contents_change_handler', this.id, evt.detail)
    change = 0
    if (evt.type == 'rule_best_plus') {
      change = 1
    } else if (evt.type == 'rule_best_minus') {
      change = -1
    }
    howmany_tspan = this.querySelector(
      `#${this.id} > :not(.contents_group) #tspan_rule_num`
    )
    howmany = parseInt(howmany_tspan.textContent)
    let sum = howmany + change
    howmany_tspan.textContent = sum
    this.dispatchEvent(new CustomEvent('dom_change', {
      bubbles: true,
      detail: { 'ruleElemId': this.id },
    }))
  },


  drag_handler: function(evt) {
    if (!this.contains(evt.target)) {
      return
    }
    console.log('inner element being dragged', evt.target.id)
  },

  label_click_handler: function() {
    console.log('lbclick', this)
    let label = this.querySelector(`#${this.id} > text > #tspan_label`)
    ui_popup_text_input(
      this,
      'Label',
      label.textContent,
      'label_change'
    )
  },
  label_change_handler: function(evt) {
    let label = this.querySelector(`#${this.id} > text > #tspan_label`)
    label.textContent = evt.detail.inputValue
  },

  initialize: function(elem, serializedState) {
    let label = elem.querySelector(`#${elem.id} > text > #tspan_label`)
    label.textContent = ''

    elem.addEventListener('change', this.dom_change_handler)
    elem.addEventListener('rule_roll', this.rule_roll_handler)
    elem.addEventListener('dom_change', this.dom_change_handler)
    elem.addEventListener('dblclick', this.activate)

    elem.addEventListener('label_click', this.label_click_handler)
    elem.addEventListener('label_change', this.label_change_handler)

    elem.addEventListener('svg_drag', this.drag_handler)
    elem.addEventListener('svg_drop', this.drop_handler)
    elem.addEventListener('svg_dragover', this.dragover_handler)
    elem.addEventListener('svg_dragenter', () => {console.log('E')})
    elem.addEventListener('svg_dragleave', () => {console.log('L')})

    elem.addEventListener('resize', this.resize_handler)

    elem.addEventListener('rule_best_plus', this.best_change_handler)
    elem.addEventListener('rule_best_minus', this.best_change_handler)
  },

  resize_handler: function(evt) {
    console.log('i', this.id, ' got resize', evt.detail.width, evt.detail.height)
    let w = evt.detail.width
    let h = evt.detail.height

    let path_area = this.querySelector(
      `#${this.id} > :not(.contents_group) .path_area`
    )
    if (path_area) { path_area.remove() }

    let area_rect = this.querySelector(
      `#${this.id} > :not(.contents-group) #area_rect`
    )
    xbox = SVG.adopt(area_rect)
    xbox.node.classList.add('droptarget')
    xbox.style({ opacity: 1, 'stroke-opacity': 0.9 })
    xbox.width(w)
    xbox.height(h)
    this_svg = SVG.adopt(this)
    this_svg.width(w)
    this_svg.height(h)

    textSumEl = this.querySelector(`#${this.id} > .text_count`)
    text_result = SVG.adopt(textSumEl)
    text_result.x(w - 30)
    text_result.y(h - 50)
    textRuleEl = this.querySelector(`#${this.id} > .text_rule`)
    text_rule  = SVG.adopt(textRuleEl)
    text_rule.x(w - 160)
    text_rule.y(h - 50)
  },

  menu: {
    'Roll All': {
      eventName: 'rule_roll',
      applicable: (node) => { return true },
    },
    'Label': {
      eventName: 'label_click',
      applicable: (node) => { return true },
    },
    'Best +': {
      eventName: 'rule_best_plus',
      applicable: (node) => { return true },
    },
    'Best -': {
      eventName: 'rule_best_minus',
      applicable: (node) => { return true },
    },
  },

  serialize: function(elem) {
    value = elem.querySelector('tspan:last-of-type').textContent
    return {value: value}
  },

  deserialize: function(elem, payload) {
    elem.querySelector('tspan:last-of-type').textContent = payload.value
  },

}


    ]]></script>
  <path
     style="color:#000000;display:inline;overflow:visible;visibility:visible;opacity:1;isolation:auto;solid-color:#000000;solid-opacity:1;fill:#000000;fill-opacity:0.5;fill-rule:nonzero;stroke:none;stroke-width:1.58"
     d="M 0.6,4.0
     C 0.0,150.3
       1.78,98.6
       1.08,198.0
     l 2.6,0.3
     c 64.23,2.104
       138.07,0.539
       198.42,0.6
     L 195.75,3.5
     C 156.22,15.333
       23.268,5.742
       0.622,3.98 Z"
     id="paper_shadow"
     inkscape:connector-curvature="0"
     sodipodi:nodetypes="cccccc" />
  <g id="group-monochrome-1" class="colorable">
  <path
     style="opacity:1;fill:url(#linearGradient822);fill-opacity:1;stroke:#b3b3b3;stroke-width:5.0;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:0.9"
     d="M 1.0,3.0
     C 50.0,3.0
       195.0,4.5
       195.0,4.5
     l 2.0,190.0
     c 0,0
       -182.5,0.0
       -195.0,-2.0 z"
     class="droptarget"
     id="area_rect"
     title="double-click to release members"
     inkscape:connector-curvature="0"
     sodipodi:nodetypes="ccccc" />
  </g>
  <text
     id="text_label"
     y="28"
     x="10"
     style="font-style:normal;
     font-weight:normal;
     font-size:28px;line-height:125%;font-family:SubotypeSteady;
     letter-spacing:0px;word-spacing:0px;
     fill:#000080;fill-opacity:1;
     "
     xml:space="preserve"><tspan
       style="font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-family:SubotypeSteady;-inkscape-font-specification:SubotypeSteady;fill:#000080;stroke-width:0.269px"
       id="tspan_label"
       sodipodi:role="line">Label</tspan></text>

  <text
     class="text_rule"
     x="40" y="180"
     style="font-style:normal;font-variant:normal;font-weight:bold;font-stretch:normal;font-size:38.072px;line-height:125%;font-family:SubotypeSteady;-inkscape-font-specification:SubotypeSteady;letter-spacing:0px;word-spacing:0px;fill:#000080;fill-opacity:1;stroke:none;stroke-width:0.269px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
     xml:space="preserve">
     <tspan id="tspan_rule_prefix"
       style="font-size:30px;font-weight:normal;font-family:SubotypeSteady;fill:#000080;"
     >Best(</tspan><tspan
       id="tspan_rule_num"
       style="font-size:30px;font-weight:bold;font-family:SubotypeSteady;fill:#000080;"
     >1</tspan><tspan
       id="tspan_rule_suffix"
       style="font-size:30px;font-weight:normal;font-family:SubotypeSteady;fill:#000080;"
     >) =</tspan>
  </text>
  <g id="contents_group" class="contents_group" >
  </g>
  <text
     xml:space="preserve"
     style="font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-size:38.072px;line-height:125%;font-family:SubotypeSteady;-inkscape-font-specification:SubotypeSteady;letter-spacing:0px;word-spacing:0px;fill:#000080;fill-opacity:1;stroke:none;stroke-width:0.26px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
     x="160" y="180"
     class="text_count"><tspan
       id="tspan_count"
       style="font-weight:bold;font-stretch:normal;font-family:SubotypeSteady;-inkscape-font-specification:SubotypeSteady;fill:#000080;stroke-width:0.26458329px">1</tspan></text>
</svg>
