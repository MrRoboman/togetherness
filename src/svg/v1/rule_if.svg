<?xml version="1.0" encoding="UTF-8" standalone="no"?>

<svg
   xmlns:dc="http://purl.org/dc/elements/1.1/"
   xmlns:cc="http://creativecommons.org/ns#"
   xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
   xmlns:svg="http://www.w3.org/2000/svg"
   xmlns="http://www.w3.org/2000/svg"
   xmlns:sodipodi="http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd"
   xmlns:inkscape="http://www.inkscape.org/namespaces/inkscape"
   width="300"
   height="300"
   version="1.1"
   id="rule_if"
   inkscape:version="0.92.3 (2405546, 2018-03-11)"
   sodipodi:docname="rule_if.svg">
  <defs id="defs2">
    <filter
       id="app-filter-colorize"
       style="color-interpolation-filters:sRGB">
      <feColorMatrix
         id="recolorize-filter-matrix"
         type="matrix"
         values="0.9 0.0 0.0 0.0  0.0
                 0.9 0.0 0.0 0.0  0.0
                 0.9 0.0 0.0 0.0  0.0
                 0.0 0.0 0.0 1.0  0.0" />
    </filter>
  </defs>
  <sodipodi:namedview
     id="base"
     pagecolor="#ffffff"
     bordercolor="#666666"
     borderopacity="1.0"
     inkscape:pageopacity="0.0"
     inkscape:pageshadow="2"
     inkscape:zoom="1.4"
     inkscape:cx="-157.2857"
     inkscape:cy="53.559156"
     inkscape:document-units="px"
     showgrid="false"
     units="px"
     inkscape:window-width="1920"
     inkscape:window-height="1025"
     inkscape:window-x="0"
     inkscape:window-y="27"
     inkscape:window-maximized="1" />
  <script
     type="text/javascript"
     data-namespace="rule_if"
     id="script_rule_if"><![CDATA[
var rule_if = {

  rule_roll_handler: function(evt) {
    console.log('rule_if', this.id, 'hears rule_roll event', evt)
    contentsGroup = this.querySelector('#' + this.id + '_contents_group')
    contentsGroup.querySelectorAll('svg').forEach((s) => {
      evt_fire('die_roll', s, null, {})
    })
  },

  activate: function(evt) {
    console.log('rule_if this', this, 'hears activate event', evt)
    lock_selection(evt)
  },

  dragover_handler: function(evt) {
    console.log('ruleif dragover_handler', evt.detail.draggedElemId, evt.detail.dropElemId)
    draggedElem = byId(evt.detail.draggedElemId)
    dragged = SVG.adopt(draggedElem)
    dropElem = byId(evt.detail.dropElemId)
    drop = SVG.adopt(dropElem)

    is_inside = isInside(dragged.node, drop.node)
    if (!is_inside) {
      drop.opacity(0.9)
      return
    }
    drop.opacity(1.0)
  },

  dragstart_droptarget_handler: function(evt) {
    console.log('ruleif', this.id, 'dragstart_droptarget_handler', evt.detail.draggedElemId, evt.detail.dropElemId)
    el = this.querySelector('#' + this.id + '_big_rect')
    el.style['fill-opacity'] = 1.0
  },

  dragend_droptarget_handler: function(evt) {
    ruleElem = this
    console.log('ruleif dragend_droptarget_handler', ruleElem.id, evt.detail.draggedElemId, evt.detail.dropElemId)
    draggedElem = byId(evt.detail.draggedElemId)
    dragged = SVG.adopt(draggedElem)
    dropElem = byId(evt.detail.dropElemId)
    drop = SVG.adopt(dropElem)
    drop.opacity(1.0)
    dropElem.style['fill-opacity'] = 0.2

    contentsGroup = this.querySelector('#' + ruleElem.id + '_contents_group')
    is_inside = isInside(dragged.node, drop.node)

    if (contentsGroup.querySelector('#' + draggedElem.id)) {
      // already inside the contents
      if (is_inside) {
        return
      }
      pop_from_parent(draggedElem, {})
    } else {
      if (!is_inside) {
        return
      }
      push_to_parent(
        draggedElem,
        ruleElem,
        (dieElem, parentElem) => {
          console.log('consume it here', dieElem.id, parentElem.id)
          contentsGroup.appendChild(dieElem)
        }
      )
    }
    ruleElem.dispatchEvent(new CustomEvent('contents_change', {
      bubbles: true,
      detail: { 'ruleElemId': ruleElem.id },
    }))
  },

  shape_change_handler: function(evt) {
    console.log('shape_change_handler', this.id, evt)
    contentsGroup = this.querySelector('#' + this.id + '_contents_group')
    cgObj = SVG.adopt(contentsGroup)
    bounds = cgObj.bbox()
    if (evt.type == 'rule_height_minus') {
      delta = { x: 0, y: -10 }
    } else if (evt.type == 'rule_height_plus') {
      delta = { x: 0, y: 10 }
    } else if (evt.type == 'rule_width_minus') {
      delta = { x: -10, y: 0 }
    } else if (evt.type == 'rule_width_plus') {
      delta = { x: 10, y: 0 }
    }

    el = this.querySelector('#' + this.id + '_big_rect')
    x = SVG.adopt(el)
    if ((x.width() + delta.x) < (bounds.width + bounds.x)) {
        console.error('out of bounds', bounds)
        return
    }
    if ((x.height() + delta.y) < (bounds.height + bounds.y)) {
        console.error('out of bounds', bounds)
        return
    }
    x.width( x.width() + delta.x )
    x.height( x.height() + delta.y )

    el = this.querySelector('#top_rect')
    x = SVG.adopt(el)
    x.x( x.x() + (delta.x/2) )

    el = this.querySelector('#bottom_rect')
    x = SVG.adopt(el)
    x.x( x.x() + (delta.x/2) )
    x.y( x.y() + delta.y )

    el = this.querySelector('#text_rule')
    x = SVG.adopt(el)
    x.x( x.x() + (delta.x/2) )

    el = this.querySelector('#text_if')
    x = SVG.adopt(el)
    x.x( x.x() + (delta.x/2) )
    x.y( x.y() + delta.y )

    el = this.querySelector('#tspan_if')
    x = SVG.adopt(el)
    x.x( x.x() + (delta.x/2) )
    x.y( x.y() + delta.y )

    x = SVG.adopt(this)
    x.width( x.width() + delta.x )
    x.height( x.height() + delta.y )

  },

  contents_change_handler: function(evt) {
    ruleElem = this
    console.log('contents_change_handler', ruleElem.id, evt.detail)
    let sum = 0
    q = '#' + ruleElem.id + '_contents_group > svg'
    console.log('q', q)
    containedSVGs = this.querySelectorAll(q)
    console.log('c', containedSVGs)
    containedSVGs.forEach((s) => {
      s.querySelectorAll('tspan').forEach((t) => {
        if (t.closest('svg').id !== s.id) {
          // it's buried multiple levels deep in sub-SVGs
          // so skip it lest it be double-counted
          return
        }
        c = t.textContent.trim()
        num = parseInt(c)
        if (isNaN(num)) {
          if (c == '+') {
            sum = sum + 1
          } else if (c == '-') {
            sum = sum - 1
          }
        } else {
          sum = sum + num
        }
      })
    })
    condition_tspan = ruleElem.querySelector('#tspan_rule_num')
    gate = parseInt(condition_tspan.textContent)
    result = (sum >= gate) ? 1 : 0
    result_tspan = ruleElem.querySelector('#tspan_if')
    result_tspan.textContent = result

    el = this.querySelector('#bottom_rect')
    SVG.adopt(el).attr({
      'stroke-width': result ? 4.0 : 2.7,
      'stroke': result ? "#a0a0a0" : "#f0f0f0",
    })
  },

  cond_change_handler: function(evt) {
    console.log('contents_change_handler', this.id, evt.detail)
    change = 0
    if (evt.type == 'rule_if_cond_plus') {
      change = 1
    } else if (evt.type == 'rule_if_cond_minus') {
      change = -1
    }
    condition_tspan = this.querySelector('#tspan_rule_num')
    gate = parseInt(condition_tspan.textContent)
    condition_tspan.textContent = gate + change
    this.dispatchEvent(new CustomEvent('contents_change', {
      bubbles: true,
      detail: { 'ruleElemId': this.id },
    }))
  },

  initialize: function(elem) {
    elem.addEventListener('change', this.contents_change_handler)
    elem.addEventListener('rule_roll', this.rule_roll_handler)
    elem.addEventListener('rule_height_minus', this.shape_change_handler)
    elem.addEventListener('rule_height_plus', this.shape_change_handler)
    elem.addEventListener('rule_width_minus', this.shape_change_handler)
    elem.addEventListener('rule_width_plus', this.shape_change_handler)
    elem.addEventListener('rule_if_cond_plus', this.cond_change_handler)
    elem.addEventListener('rule_if_cond_minus', this.cond_change_handler)
    elem.addEventListener('contents_change', this.contents_change_handler)
    elem.addEventListener('dblclick', this.activate)
    elem.addEventListener('svg_drag_droptarget', this.dragover_handler)
    elem.addEventListener('svg_dragstart_droptarget', this.dragstart_droptarget_handler)
    elem.addEventListener('svg_dragend_droptarget', this.dragend_droptarget_handler)
    contentsEl = elem.querySelector('#contents_group')
    contentsEl.id = elem.id + '_contents_group'
    bigRectEl = elem.querySelector('#big_rect')
    bigRectEl.id = elem.id + '_big_rect'
  },

  menu: {
    'Roll All': {
      eventName: 'rule_roll',
      applicable: (node) => { return true },
    },
    'Height -': {
      eventName: 'rule_height_minus',
      applicable: (node) => { return true },
    },
    'Height +': {
      eventName: 'rule_height_plus',
      applicable: (node) => { return true },
    },
    'Width -': {
      eventName: 'rule_width_minus',
      applicable: (node) => { return true },
    },
    'Width +': {
      eventName: 'rule_width_plus',
      applicable: (node) => { return true },
    },
    'Cond +': {
      eventName: 'rule_if_cond_plus',
      applicable: (node) => { return true },
    },
    'Cond -': {
      eventName: 'rule_if_cond_minus',
      applicable: (node) => { return true },
    },
  },

  serialize: function(elem) {
    value = elem.querySelector('tspan').textContent
    value = elem.lastChild.querySelector('tspan').textContent
    return {value: value}
  },

  deserialize: function(elem, payload) {
    elem.lastChild.querySelector('tspan').textContent = payload.value
  },

}


    ]]></script>
  <g
     id="group-monochrome-1"
     filter="url(#app-filter-colorize)">
    <rect
       style="fill:#ffffff;fill-opacity:0.2;stroke:#a0a0a0;stroke-width:4;stroke-linecap:butt;stroke-linejoin:round;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1"
       id="big_rect"
       class="droptarget"
       width="280"
       height="280"
       x="10"
       y="10" />
    <g id="contents_group" class="contents_group">
    </g>
    <rect
       style="fill:#ffffff;fill-opacity:1;stroke:#f0f0f0;stroke-width:1.9;stroke-linecap:butt;stroke-linejoin:round;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1"
       id="top_rect"
       width="48.0"
       height="12.0"
       x="126.0"
       y="4.26" />
    <rect
       style="fill:#ffffff;fill-opacity:1;stroke-linecap:butt;stroke-linejoin:round;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1"
       id="bottom_rect"
       stroke-width="2.7"
       stroke="#f0f0f0"
       width="77.3"
       height="21.3"
       x="111.34"
       y="274.29" />
  </g>
    <text
       xml:space="preserve"
       style="font-style:normal;font-weight:normal;font-size:10.5px;line-height:1.25;font-family:sans-serif;text-align:center;letter-spacing:0px;word-spacing:0px;text-anchor:middle;fill:#000000;fill-opacity:1;stroke:none"
       x="149.8"
       y="14.28"
       id="text_rule"
       ><tspan id="tspan_rule_prefix"
               style="font-size:10.5px;text-align:center;text-anchor:middle"
               >IF(x ≥ </tspan><tspan
               id="tspan_rule_num"
               style="font-size:10.5px;text-align:center;text-anchor:middle"
               >6</tspan><tspan
               id="tspan_rule_suffix"
               style="font-size:10.5px;text-align:center;text-anchor:middle"
               >)</tspan></text>
    <text
       xml:space="preserve"
       style="font-style:normal;font-weight:normal;font-size:16px;line-height:1.25;font-family:sans-serif;text-align:center;letter-spacing:0px;word-spacing:0px;text-anchor:middle;fill:#000000;fill-opacity:1;stroke:none;stroke-width:1"
       x="150.23"
       y="290.77"
       id="text_if"><tspan
         sodipodi:role="line"
         id="tspan_if"
         x="150.26"
         y="290.77"
         style="font-size:16px;text-align:center;text-anchor:middle">0</tspan></text>
</svg>
